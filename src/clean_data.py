{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e59057ca-fb4f-4b98-8869-2a46a2c8357a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import json\n",
    "\n",
    "# Load data\n",
    "def load_data(filepath):\n",
    "    df = pd.read_csv(filepath)\n",
    "    return df\n",
    "\n",
    "# Extract nested dictionary values\n",
    "def extract_price(df):\n",
    "    def extract_price_value(price_data):\n",
    "        try:\n",
    "            if isinstance(price_data, str):\n",
    "                price_dict = json.loads(price_data.replace(\"'\", \"\\\"\"))\n",
    "                return float(price_dict['total'])\n",
    "            else:\n",
    "                return float(price_data)\n",
    "        except (TypeError, json.JSONDecodeError, KeyError):\n",
    "            print(f\"Error processing price data: {price_data}\")\n",
    "            return np.nan\n",
    "    \n",
    "    df['Price'] = df['price'].apply(extract_price_value)\n",
    "    return df\n",
    "\n",
    "# Clean data\n",
    "def clean_data(df):\n",
    "    df = extract_price(df)\n",
    "    \n",
    "    # Convert DepartureDate to datetime\n",
    "    df['DepartureDate'] = pd.to_datetime(df['DepartureDate'], errors='coerce')\n",
    "    \n",
    "    # Remove outliers in Price\n",
    "    q1 = df['Price'].quantile(0.25)\n",
    "    q3 = df['Price'].quantile(0.75)\n",
    "    iqr = q3 - q1\n",
    "    lower_bound = q1 - 1.5 * iqr\n",
    "    upper_bound = q3 + 1.5 * iqr\n",
    "    df = df[(df['Price'] >= lower_bound) & (df['Price'] <= upper_bound)]\n",
    "    \n",
    "    # Fill missing values in DepartureDate using .loc\n",
    "    df.loc[:, 'DepartureDate'] = df['DepartureDate'].ffill()\n",
    "    \n",
    "    return df\n",
    "\n",
    "# Save cleaned data\n",
    "def save_clean_data(df, filepath):\n",
    "    df.to_csv(filepath, index=False)\n",
    "\n",
    "def main():\n",
    "    # Load the data\n",
    "    df = load_data('flight_prices.csv')\n",
    "    \n",
    "    # Clean the data\n",
    "    df_clean = clean_data(df)\n",
    "    \n",
    "    # Save the cleaned data\n",
    "    save_clean_data(df_clean, 'cleaned_flight_prices.csv')\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
